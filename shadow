#!/usr/bin/env bash
set -euo pipefail

# Source utility functions
# Assuming lib is in the same dir as shadow, which should be the repo root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
UTILS_SCRIPT_PATH="$SCRIPT_DIR/lib/utils.sh"
if [ -f "$UTILS_SCRIPT_PATH" ]; then
    # shellcheck source=lib/utils.sh
    source "$UTILS_SCRIPT_PATH"
    detect_os # Call detect_os after sourcing for shadow script's context
else
    echo "Error: Utilities script not found at $UTILS_SCRIPT_PATH"
    echo "Please ensure 'shadow' is run from the repository root or utils.sh is accessible."
    # Decide if shadow should exit or continue with limited functionality. For now, let's exit.
    exit 1
fi

# Function to display help message
usage() {
  echo "Usage: $0 walk <profile_name> [--add] [--dry-run] [--force] [--no-deps]"
  echo ""
  echo "Manages chezmoi profiles."
  echo ""
  echo "Commands:"
  echo "  walk <profile_name>    Apply the specified profile."
  echo ""
  echo "Options for walk command:"
  echo "  --add                  Add the profile to the existing configuration (instead of replacing)."
  echo "  --dry-run              Show what changes would be made without actually applying them."
  echo "  --force                Overwrite existing configurations without prompting."
  echo "  --no-deps              Skip installation of profile dependencies."
  exit 1
}

# Main script logic
if [ "$#" -eq 0 ]; then
  usage
fi

COMMAND="$1"
shift

# Check for chezmoi installation
if ! command -v chezmoi &> /dev/null; then
  echo "Error: chezmoi is not installed. Please install chezmoi first."
  echo "See: https://www.chezmoi.io/install/"
  exit 1
fi

case "$COMMAND" in
  walk)
    ADD_MODE=false
    DRY_RUN_MODE=false
    FORCE_MODE=false
    SKIP_DEPS=false # New flag
    PROFILE_NAME=""
    REPO_ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null || pwd)" # Get repo root or current dir

    # Parse options for walk command
    while [ "$#" -gt 0 ]; do
      case "$1" in
        --add)
          ADD_MODE=true
          shift
          ;;
        --dry-run)
          DRY_RUN_MODE=true
          shift
          ;;
        --force)
          FORCE_MODE=true
          shift
          ;;
        --no-deps) # New flag
          SKIP_DEPS=true
          shift
          ;;
        -*)
          echo "Unknown option: $1"
          usage
          ;;
        *)
          if [ -z "$PROFILE_NAME" ]; then
            PROFILE_NAME="$1"
          else
            echo "Too many arguments. Profile name already set to '$PROFILE_NAME'."
            usage
          fi
          shift
          ;;
      esac
    done

    if [ -z "$PROFILE_NAME" ]; then
      echo "Error: Profile name not specified for walk command."
      usage
    fi

    # Determine chezmoi source path
    # Assuming 'profiles' directory is at the root of where the shadow script is.
    # If shadow script is at repo root, and profiles/ is also at repo root.
    SOURCE_PATH="$REPO_ROOT_DIR/profiles/$PROFILE_NAME"

    if [ ! -d "$SOURCE_PATH" ]; then
      echo "Error: Profile directory '$SOURCE_PATH' not found."
      exit 1
    fi

    echo "Executing 'walk' command for profile: $PROFILE_NAME"
    echo "  Source path: $SOURCE_PATH"

    # Construct chezmoi command
    CHEZMOI_CMD="chezmoi apply --source $SOURCE_PATH"

    if [ "$DRY_RUN_MODE" = true ]; then
      CHEZMOI_CMD="$CHEZMOI_CMD --dry-run"
      echo "  Mode: Dry run"
    fi

    if [ "$FORCE_MODE" = true ]; then
      CHEZMOI_CMD="$CHEZMOI_CMD --force"
      echo "  Mode: Force"
    fi

    if [ "$ADD_MODE" = true ]; then
      # chezmoi apply inherently handles adding/merging.
      # The --add flag is more for our internal logic/history.
      echo "  Mode: Add (profile will be applied, potentially merging with existing)"
    fi

    echo "  Executing: $CHEZMOI_CMD"
    # Execute chezmoi command
    # In a real environment, you would run $CHEZMOI_CMD directly.
    # For testing in environments without chezmoi, we'll simulate it.
    eval "$CHEZMOI_CMD"
    CHEZMOI_EXIT_CODE=$?


    if [ $CHEZMOI_EXIT_CODE -eq 0 ]; then
      echo "  chezmoi command executed successfully."

      # --- Dependency Processing ---
      if [ "$DRY_RUN_MODE" = true ]; then
        echo "  Dry run mode, skipping dependency processing."
      elif [ "$SKIP_DEPS" = true ]; then
        echo "  --no-deps specified, skipping dependency processing."
      else
        echo "  Processing profile dependencies..."
        if ! command -v yq &> /dev/null; then
          echo "  Warning: yq command not found. Cannot process profile dependencies. Please install yq."
        else
          PROFILE_YML_PATH="$SOURCE_PATH/profile.yml"
          if [ ! -f "$PROFILE_YML_PATH" ]; then
            echo "  No profile.yml found at $PROFILE_YML_PATH. Skipping dependency processing."
          else
            # Check if dependencies.packages exists and is not null or empty
            if yq e '.dependencies.packages | length > 0' "$PROFILE_YML_PATH" &>/dev/null; then
              echo "  Checking and installing profile dependencies from $PROFILE_YML_PATH..."
              # Store packages in an array to handle potential spaces or special characters
              mapfile -t packages_to_install < <(yq e '.dependencies.packages[]' "$PROFILE_YML_PATH")

              if [ ${#packages_to_install[@]} -gt 0 ]; then
                for package_name in "${packages_to_install[@]}"; do
                  echo "  Checking for package: $package_name"
                  if command -v "$package_name" &> /dev/null; then
                    echo "    Package '$package_name' is already installed."
                  else
                    echo "    Package '$package_name' not found. Attempting to install..."
                    if install_package "$package_name"; then
                      echo "    Successfully initiated installation for '$package_name'."
                      # Re-check if the command is available after installation attempt
                      if command -v "$package_name" &> /dev/null; then
                         echo "    Package '$package_name' is now installed."
                      else
                         echo "    Warning: Installation of '$package_name' initiated, but command still not found. It might be available in a new shell session or there was an issue."
                      fi
                    else
                      echo "    Error: Failed to install package '$package_name'."
                    fi
                  fi
                done
                echo "  Dependency check complete."
              else
                echo "  No package dependencies specified in $PROFILE_YML_PATH (dependencies.packages is empty or invalid)."
              fi
            else
              echo "  No package dependencies specified in $PROFILE_YML_PATH (dependencies.packages key missing, null, or empty)."
            fi
          fi
        fi
      fi
      # --- End Dependency Processing ---

      if [ "$DRY_RUN_MODE" = false ]; then # History update should still be conditional on dry_run
        HISTORY_FILE="$REPO_ROOT_DIR/.profile-history"
        HISTORY_ENTRY="$PROFILE_NAME"
        if [ "$ADD_MODE" = true ]; then
          HISTORY_ENTRY="$PROFILE_NAME (added)"
        fi
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $HISTORY_ENTRY" >> "$HISTORY_FILE"
        echo "  Profile '$PROFILE_NAME' recorded in $HISTORY_FILE"
      else
        echo "  Dry run mode, no changes made and history not updated (dependencies might have been listed if not for dry run)."
      fi
    else
      echo "  Error executing chezmoi command (exit code: $CHEZMOI_EXIT_CODE)."
      exit 1 # Propagate error
    fi
    ;;
  *)
    echo "Unknown command: $COMMAND"
    usage
    ;;
esac
